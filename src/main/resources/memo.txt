Spring Security의 인가처리
    SecurityConfig에
        http.antMatchers("/admin/**").hasRoles("admin")

    이라고 설정한 경우
    시큐리티에서 이 설정을 읽어들인 뒤 Map<자원경로,권한정보> 타입으로 저장해놓음.
    cf) ExpressionBasedFilterInvocationSecurityMetadatSource.java 에 map 있음 (부모 클래스의 메소드 사용 DefaultFilterInvocationSecurityMetaDataSource)
    FitlerSecurityInterceptor는 사용자가 요청한 url을 key로 가지는 value를 얻어서 권한목록정보를 얻을 수 있고,
    인증정보는 SecurityContext 안에 저장되어 있는 인증정보를 참조하며,
    요청정보는 FilterInvocation 객체 형태로 전달
     FilterSecurityInterceptor가 인증,요청,권한정보를 담아서 AccessDecisionManager(접근 결정 관리자)에게 인가처리를 하도록 위임
        -> vote(Authentication,FilterInvocation,List<ConfigAttribute>)

    DB 연동해서 인가처리를 할 때에도 인증,요청,권한정보를 전달하는 것이 중요함
    DB 연동해서 인가처리 할때도 Map 기반으로 진행함.


   기존에 있는 FilterInterceptor 와 customize 한 FilterInterceptor 필터 두개가 있는 경우
   같은 인터페이스 타입의 FilterInterceptor가 있는 경우 먼저 오는 필터에서 인가처리가 된 경우 다음 동일한 인터페이스 타입의 필터에서는
   인가처리를 하지 않는다 (FILTER_APPLIED 속성 체크)


   이 프로젝트는..돌아가진 않음.

   !!! 일단 초반에 master브랜시 소스 다운받아서  spring.jpa.hibernate.ddl-auto=create 설정 후 프로젝트 run,db에 테이블 구조는 모두 생성됨
   그 다음에 이 프로젝트에서 저 부분 주석처리 하고 데이터만 넣어주는 아래 sql문 실행하면 잘 돌아감 ㅎㅎ
   select * from account;
   select * from role;
   # 회원가입은 홈페이지에서 admin, user, manager 순으로 하면 됨
   insert into role VALUES(1,'ROLE_ADMIN','ROLE_ADMIN');
   insert into role VALUES(2,'ROLE_USER','ROLE_USER');
   insert into role VALUES(3,'ROLE_MANAGER','ROLE_MANAGER');

   select * from account_roles
   insert into account_roles values(1,1);
   insert into account_roles values(1,2);
   insert into account_roles values(1,3);
   insert into account_roles values(2,2);
   insert into account_roles values(3,2);
   insert into account_roles values(3,3);
   select * from resources;
   insert into resources values(1,null,1,'/admin/**','url');
   insert into resources values(2,null,2,'/mypage','url');
   insert into resources values(3,null,3,'/messages','url');
   insert into resources values(4,null,4,'/config','url');

   select * from role_resources;

   insert into role_resources values(1,1);
   insert into role_resources values(2,1);
   insert into role_resources values(2,2);
   insert into role_resources values(2,3);
   insert into role_resources values(3,1);
   insert into role_resources values(3,3);
   insert into role_resources values(4,1);

   // 권한 ip 설정
   insert into access_ip values(16,'0:0:0:0:0:0:0:1');

   ### 권한계층설정(role_hierarchy)
   insert into role_hierarchy values(1,ROLE_ADMIN,NULL);
   insert into role_hierarchy values(2,ROLE_MANAGER,ROLE_ADMIN);
   insert into role_hierarchy values(3,ROLE_USER,ROLE_MANAGER);

   role_hierarchy 테스트 하고 싶으면
    account_roles table에서 각 account_id에 해당하는 role_id 하나만 남도록 컬럼 삭제해보기
    예) account_id admin인 경우 role_id ROLE_ADMIN만 갖도록 !
    그래도 /mypage, /messages에 접근 되는지 보기



    ==================================================================================
    # method 방식 인가 - db
    insert into resources values(5,'',5,'io.security.corespringsecurity.aopsecurity.AopMethodService.methodSecured','method');
    insert into role_resources values(5,2);